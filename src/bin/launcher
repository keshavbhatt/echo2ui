#!/bin/bash

# source echo2ui util
. ./echo2ui_utils --source-only

argc=$#
argv=("$@")

display_usage()
 { 
   bordered_title "launcher for echo2ui by keshavnrj@gmail.com"
   echo -e "\nthis wrapper script will launch the application and bind it to echo2ui\n" 
   echo -e "\nUsage: $0 [launchable-app or its path] [path to log file](optional)\n" 
   echo -e "Example 1: $0 wonderwall\n"
   echo -e "Example 2: $0 wonderwall /tmp/wonderwall.log\n"
 }
 
 # check whether user had supplied -h or --help . If yes display usage 
 if [[ ( $* == "--help") ||  $* == "-h" ]] 
 then 
   display_usage
   exit 0
 fi 
 
 # if less than 2 arguments supplied, display usage 
 if [[ $* != "--help" || $* != "-h" ]] && [ $# -le 0 ]; 
 then 
   echo -e "\nError: insufficient arguments passed \n" 
   display_usage
   exit 1
 fi

# path to log file where we want to stdout and stderr on error
LOG_FILE="$2";

# save stdout & stderr of sub shell to output,
# while piping to parent tty
# keeping the exitcode intact
output="$(
    # exit sub shell with non zero exit 
    set -ex; 
    {
      "$1" 2>&1 | tee /dev/tty; exit ${PIPESTATUS[0]}
    };
)";

# get sub shell exit code
# save error if any
# exit with error code if any
# or exit 0;
ec="$?"; if [ $ec -eq 0 ]; then 
    # zero exit code
    
    exit 0; 
else
    # non zero exit code

    #echo $output;
    
    # if path to it was provided
    if [ -n "$LOG_FILE" ]; then
        NOW=$( date )
        echo -e "$NOW: $output\n" >> "$LOG_FILE";
    fi;
    
    # call echo2ui to output the error message
    __dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
    ${__dir}/echo2ui "Context" "Title" "$output" 0 0

    # exit with sub shell exit code
    exit "$ec"; 
fi;
